import sys
import os, subprocess, ctypes, re
from itertools import chain

try:
    from StringIO import StringIO ## for Python 2
except ImportError:
    from io import StringIO ## for Python

try:
	import serpent
except ImportError as e:
	print(e)
	sys.exit(-1)

class _option(object):
	def __init__(self, mapping, data = None):
		self.mapping = mapping
		self.value = None
		self.data = data
	def __str__(self):
		if self.value is None: self.value = self.mapping(self.data)
		return str(self.value)

serpent.map = _option

def from_target(name, *args):
	if name in serpent._target_outputs:
		return os.path.join(serpent._target_outputs[name], *args)
	else:
		class placeholder:
			def __str__(x):
				if name in serpent._target_outputs:
					return os.path.join(serpent._target_outputs[name], *args)
				else:
					raise Exception("No output registerd with name {0} {1}".format( name, serpent._target_outputs ))
		return placeholder()


serpent.option(
   trigger     = "workspace",
   value       = "vs2015",
   description = "Visual Studio"
)

visual_studio_version = serpent.map(
	lambda x: dict(x)[serpent.triggers['workspace']],
	data = [("vs2015", 2015), ("vs2017", 2017), ("vs2022", "2022")]
)

visual_studio_internal = serpent.map(
	lambda x: dict(x)[serpent.triggers['workspace']],
	data = [("vs2015", 14),("vs2017", 15),("vs2022", 17)]
)

visual_studio_toolset = serpent.map(
	lambda x: dict(x)[serpent.triggers['workspace']],
	data = [("vs2015", 'v140'),("vs2017", 'v141'),("vs2022", 'v143')]
)

serpent.option(
   trigger     = "toolset",
   value       = str(visual_studio_toolset),
   description = "Visual Studio Toolset"
)




def debuginfo():
	from inspect import getframeinfo, stack
	caller = getframeinfo(stack()[2][0])
	return caller.filename, caller.lineno

serpent.default_toolversion = '4.0'
serpent.default_toolset = 'v110'
serpent.projects = {}
serpent.outdirs = {}
serpent.configuration = {}
serpent._internal = {}
serpent._configurations = ['Release']
serpent._execute_commands = []
serpent._target_outputs = {}

solutions = []
Application=1
DynamicLibrary=2
StaticLibrary=3

qt_targets = """
<Target Name="CompileQtQRC" BeforeTargets="ClCompile" Inputs="@(ResFiles)" Outputs="@(ResFiles->'%(RootDir)%(Directory)qrc_%(Filename).cpp')">
	 <Message Text="Compiling: %(ResFiles.FullPath) using rcc" />
	 <Exec Command="&quot;$(QTDIR)/bin/rcc.exe&quot; &quot;%(ResFiles.FullPath)&quot; -o &quot;%(ResFiles.RootDir)%(ResFiles.Directory)qrc_%(ResFiles.Filename).cpp&quot;"/>
 </Target>		
 <Target Name="CreateDirectories" BeforeTargets="Moc">
	<MakeDir Directories="$(GenDir)"/>
 </Target>
 <Target Name="Moc" Inputs="@(QtIncludes)" BeforeTargets="ClCompile" Outputs="@(QtIncludes->'$(GenDir)/moc_%(Filename).cpp')">
	<Exec Command = "&quot;$(Moc)&quot; &quot;%(QtIncludes.Identity)&quot; -nw -o &quot;$(GenDir)/moc_%(Filename).cpp&quot; $(MocFlags)" />
	<ItemGroup>
		<ClCompile Include="$(GenDir)/moc_%(Filename).cpp" Condition="Exists('$(GenDir)/moc_%(Filename).cpp')" />
	</ItemGroup> 
 </Target>
 <Target Name="CompileQtUI" BeforeTargets="ClCompile" Inputs="@(UIFiles)" Outputs="@(UIFiles->'$(GenDir)/ui_%(Filename).h')">
	<Message Text="Compiling: %(UIFiles.FullPath) using UIC" />
	<Exec Command="&quot;$(QTDIR)\\bin\\uic.exe&quot; &quot;%(UIFiles.FullPath)&quot; -o &quot;$(GenDir)/ui_%(UIFiles.Filename).h&quot;"/>
</Target>
"""


def which(pgm):
	path=os.getenv('PATH')
	for p in path.split(os.path.pathsep):
		p=os.path.join(p,pgm)
		if os.path.exists(p) and os.access(p,os.X_OK):
			return p

def find_executable(executable, path=None):
	"""Find if 'executable' can be run. Looks for it in 'path'
	(string that lists directories separated by 'os.pathsep';
	defaults to os.environ['PATH']). Checks for all executable
	extensions. Returns full path or None if no command is found.
	"""
	if path is None:
		path = os.environ['PATH']
	
	paths = []
	if isinstance(path, str): 
		paths = path.split(os.pathsep)
	else:
		paths = path

	extlist = ['']
	if os.name == 'os2':
		(base, ext) = os.path.splitext(executable)
		# executable files on OS/2 can have an arbitrary extension, but
		# .exe is automatically appended if no dot is present in the name
		if not ext:
			executable = executable + ".exe"
	elif sys.platform == 'win32':
		pathext = os.environ['PATHEXT'].lower().split(os.pathsep)
		(base, ext) = os.path.splitext(executable)
		if ext.lower() not in pathext:
			extlist = pathext
	for ext in extlist:
		execname = executable + ext
		if os.path.isfile(execname):
			return execname
		else:
			for p in paths:
				f = os.path.join(p, execname)
				if os.path.isfile(f):
					return f
	else:
		return None

def find_file(file, paths=None):
	paths = chain.from_iterable(x.split(os.pathsep) for x in paths)
	for p in paths:
		f = os.path.join(p, file)
		if os.path.isfile(f):
			return f
	else:
		return None

def find_guid(file):
	f = open(file, 'r')
	content = f.read()
	f.close()
	guid = '380D6B49-C7EA-4F3A-8383-B50CAC3F054D';
	match = re.search("\<ProjectGuid\>\{([A-Za-z0-9\-]+)\}\<\/ProjectGuid\>", content)
	if match is not None:
		guid = match.groups(1)[0]
	del content
	del match
	return guid

class _placeholder:
	def __init__(self):
		self.generated = None

class _external:
	def __init__(self, project, name, guid, configurations = None, platforms = None, depends = None, options = [], generate = None, debug=None):
		self.name = name
		self.project = os.path.abspath(project)
		self.configurations = configurations
		self.platforms = platforms
		self.guid = guid
		self.depends = depends
		self.options = options
		self.generate = generate
		self.debug = debug

class _project:
	def __init__(self, project, name, guid, configurations = None, depends = None, options = []):
		self.name = name
		self.project = os.path.abspath(project)
		self.configurations = configurations
		self.guid = guid
		self.depends = depends
		self.options = options

class _condition:
	def __init__(self, condition, **kwargs):
		self.condition = condition
		self.kwargs = kwargs

class _solution:
	def __init__(self, **kwargs):
		self.kwargs = kwargs

	def generate(self):
		solution = self.kwargs.get('solution', None)
		format = self.kwargs.get('format', 12), 
		version = self.kwargs.get('version', 2012), 
		projects = self.kwargs.get('projects', [])
		debug = self.kwargs.get('debug', None)

		solutiondir = os.path.dirname(solution)
		if not os.path.exists(solutiondir): os.mkdir(solutiondir)
		fobj = StringIO()
		fobj.write("""Microsoft Visual Studio Solution File, Format Version %s.00\n\r""" % format);
		fobj.write("""# Visual Studio %s\n\r""" % version);

		for project in projects:
			if project in serpent._internal:		
				obj = serpent._internal[project]
				relative_path = os.path.relpath(obj.project, solutiondir)
				guid = None
				if obj.project.endswith(".csproj"):
					guid = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";
				elif obj.project.endswith(".vcxproj"):
					guid = "{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}";			
				fobj.write("""Project("%s") = "%s", "%s", "{%s}"\n\r""" % (guid, obj.name, relative_path, obj.guid));
				fobj.write("""EndProject\n\r""");
			else:
				raise Exception("%s is not an name of a valid target: %s %s" % (project, debug[0], debug[1], ) )

		output_value = fobj.getvalue();
		fobj.close();
		del fobj
	
		if os.path.isfile(solution):
			output_stream = open(solution, 'r')
			value = output_stream.read()
			output_stream.close()
			if value != output_value:
				output_stream = open(solution, 'w')
				output_stream.write(output_value)
				output_stream.close()
		else:
			output_stream = open(solution, 'w')
			output_stream.write(output_value)
			output_stream.close()			
		del output_value

def _create_targets(directory, project, string):
	project = os.path.join( directory, project)
	fobj = StringIO()
	fobj.write('<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">');
	fobj.write(string)
	fobj.write('</Project>');
	output_value = fobj.getvalue();
	fobj.close();
	del fobj
	
	if os.path.isfile(project):
		output_stream = open(project, 'r')
		value = output_stream.read()
		output_stream.close()
		if value != output_value:
			output_stream = open(project, 'w')
			output_stream.write(output_value)
			output_stream.close()
	else:
		output_stream = open(project, 'w')
		output_stream.write(output_value)
		output_stream.close()			
	del output_value

def _msvc_to_runtime(runtime):
	if runtime in ['StaticRuntime', 'DynamicRuntime', 'StaticDebugRuntime', 'DynamicDebugRuntime']:
		index = ['StaticRuntime', 'DynamicRuntime', 'StaticDebugRuntime', 'DynamicDebugRuntime'].index(runtime)
		mappings = ['MultiThreaded','MultiThreadedDLL','MultiThreadedDebug','MultiThreadedDebugDLL']
		runtime = mappings[index]
	elif runtime in ['/MT', '/MD', '/MTd', '/MDd']:
		index = ['/MT', '/MD', '/MTd', '/MDd'].index(runtime)
		mappings = ['MultiThreaded','MultiThreadedDLL','MultiThreadedDebug','MultiThreadedDebugDLL']
		runtime = mappings[index]
	else:
		raise Exception("Runtime not expected")
	return runtime

def _msvc_to_applicationtype(shared):
	_shared = ""
	if shared == Application:
		_shared = "Application"
	elif shared == DynamicLibrary:
		_shared = "DynamicLibrary"
	elif shared == StaticLibrary:
		_shared = "StaticLibrary"
	else:
		raise Exception("Runtime not expected")
	return _shared		

def _msvc_entity_safe(str):
	return str.replace("<", "&lt;").replace(">", "&gt;")


class macro:
	def __init__(self, value):
		self.value = value
	def __str__(self):
		return self.value

def external(project, name, configuration = serpent._configurations, platforms = None, depends = [], options = [], generator = None ):
	if serpent.projects.get(name, None) != None:
		raise Exception("Duplicate name")
	serpent.projects[name] = project;
	serpent.target( name = name )
	project = os.path.abspath(project)
	def generateWrapper(**kwargs):
		if generator is not None: generator(**kwargs)
		if not os.path.exists(project):
			raise Exception("Path %s does not exists" % project )		
		serpent._internal[name].guid = find_guid(project)
	serpent._internal[name] = _external(project, name, None, configuration, platforms, depends, options, generateWrapper, debuginfo())


def commandline(name, project, folder, configuration = serpent._configurations, **kwargs):

	base = kwargs.get('base',  os.path.join( serpent._WORKING_ROOT, serpent._SERPENT_WORKAREA ) )
	project = os.path.abspath(os.path.join(base, project))
	folder = os.path.abspath(folder)
	serpent._target_outputs[name] = folder
	build = kwargs.get('build', None)
	rebuild = kwargs.get('rebuild', None)
	clean = kwargs.get('clean', None)
	intdir = kwargs.get('intdir', [])
	outdir = kwargs.get('outdir', [])	

	nmake = find_file("nmake.exe", [r'C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin'])
	intdir = os.path.abspath(os.path.join(base, intdir)) + "/"
	outdir = os.path.abspath(os.path.join(base, outdir)) + "/"


	def generate(**kwargs):

		if name in serpent._targets:
			tools = { 'nmake': nmake, 'intdir': intdir, 'outdir': outdir  }
			arguments = build(tools) if build else []
			if not os.path.exists(os.path.dirname(project)): os.mkdir(os.path.dirname(project))

			fobj = StringIO()	
			fobj.write(
			'''
			<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" InitialTargets="Build">
				<Target Name="Build">			    
					<Exec Command="{0}" WorkingDirectory="{1}" />
			    </Target>
			</Project>
			'''.format(" ".join( "&quot;" + x + "&quot;" for x in arguments), folder))		

			output_value = fobj.getvalue();
			fobj.close();
			del fobj

			if os.path.isfile(project):
				output_stream = open(project, 'r')
				value = output_stream.read()
				output_stream.close()
				if value != output_value:
					output_stream = open(project, 'w')
					output_stream.write(output_value)
					output_stream.close()
			else:
				output_stream = open(project, 'w')
				output_stream.write(output_value)
				output_stream.close()			
			del output_value

	serpent.target( name = name )
	external(name = name, project = project, configuration = configuration, generator=generate )

def cmake(name, project, folder, input, arguments = [], configuration = serpent._configurations, **kwargs):

	base = kwargs.get('base',  os.path.join( serpent._WORKING_ROOT, serpent._SERPENT_WORKAREA ) )
	project = os.path.abspath(os.path.join(base, project))
	folder = os.path.abspath(os.path.join(base, folder))
	serpent._target_outputs[name] = folder

	cmake = find_executable("cmake")
	input = os.path.abspath(input)
	relative_input = os.path.relpath(input, folder)
	if not os.path.exists(folder): os.makedirs(folder)
	if not os.path.exists(input):
		raise Exception("Input folder does not exists")	
	def _premake():
		try:
			pass			
		except Exception as e:
			print("error")

	def generate(**kwargs):
		print(cmake, serpent._targets)
		if name in serpent._targets:
			dict = { "vs2022": "Visual Studio 17 2022", "vs2017": "Visual Studio 15 2017", "vs2015": "Visual Studio 14 2015"}

			cmake_args = [cmake, "-G", dict[serpent.triggers['workspace']], relative_input] + arguments
			print(cmake_args)
			output = subprocess.call(cmake_args, cwd=folder)
			print(output)

	serpent._premake.append(_premake)
	serpent.target( name = name )
	external(name = name, project = project, configuration = configuration, generator=generate )
	del _premake

def visual_studio_dirname(x):
	x = os.path.dirname(x.replace("..\\","").replace(".\\",""))
	return x;

def visual_studio_filters_expand(files, strip=visual_studio_dirname, directory = {}):
	extension = 'rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx;h;hpp;hxx;hm;inl;inc;xsd'
	for x in files:
		x = strip(x)
		directory[x] = (serpent.guid(), extension)
		array = x.split("\\")
		path = array[0]
		for z in array[1:]:
			if path not in directory:
				directory[path] = (serpent.guid(), extension)
			path = path + "\\" + z
	return directory


def visual_studio_filters(project, toolversion=serpent.default_toolversion, files = [], headers = []):

	project = os.path.abspath(project)
	project = project + ".filters"
	fobj = StringIO()	
	fobj.write('<?xml version="1.0" encoding="utf-8"?>\n')
	fobj.write('<Project DefaultTargets="Build" ToolsVersion="%s" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">\n' % toolversion)

	directory = {}
	visual_studio_filters_expand(directory, files)
	visual_studio_filters_expand(directory, headers)  	

	fobj.write("<ItemGroup>\n");
	for x in sorted(directory):	
		fobj.write("    <Filter Include=\"%s\">\n" % x);
		fobj.write("    	<UniqueIdentifier>{%s}</UniqueIdentifier>\n" % directory[x][0]);
		fobj.write("    	<Extensions>%s</Extensions>\n" % directory[x][1]);
		fobj.write("    </Filter>\n");
	fobj.write("</ItemGroup>\n");

	fobj.write("<ItemGroup>\n");
	for x in files:
		z = os.path.dirname(x.replace("..\\","").replace(".\\",""))
		fobj.write("    <ClCompile Include=\"%s\">\n" % x);
		fobj.write("    <Filter>%s</Filter>\n" % z);
		fobj.write("    </ClCompile>\n");
	fobj.write("</ItemGroup>\n");

	fobj.write("<ItemGroup>\n");
	for x in headers:
		z = os.path.dirname(x.replace("..\\","").replace(".\\",""))
		fobj.write("    <ClInclude Include=\"%s\">\n" % x);
		fobj.write("    <Filter>%s</Filter>\n" % z);
		fobj.write("    </ClInclude>\n");
	fobj.write("</ItemGroup>\n");

	fobj.write('</Project>')
	
	output_value = fobj.getvalue();
	fobj.close();
	del fobj

	if os.path.isfile(project):
		output_stream = open(project, 'r')
		value = output_stream.read()
		output_stream.close()
		if value != output_value:
			output_stream = open(project, 'w')
			output_stream.write(output_value)
			output_stream.close()
	else:
		output_stream = open(project, 'w')
		output_stream.write(output_value)
		output_stream.close()			
	del output_value



def  _expand(items, workingdir, absolute = None):
	for x in range(len(items)):
		if isinstance(items[x], str):
			if items[x].startswith(':'):
				items[x] = items[x].replace(":","")
			elif items[x] == "":
				continue	
			elif items[x].startswith('./'):
				if absolute is None:
					items[x] = os.path.relpath(items[x], workingdir)
				else:
					items[x] = os.path.abspath(items[x])
			elif serpent.path.isabs(items[x]) == False:
				if absolute is None:			
					items[x] = os.path.relpath(items[x], workingdir)
				else:
					items[x] = os.path.abspath(items[x])				
	return items;


def visual_studio_generator(stage):
	# Get property files that need to be includes
	if stage == 1: 
		return ['$(VCTargetsPath)\Microsoft.Cpp.default.props', '$(VCTargetsPath)\Microsoft.Cpp.props']
	if stage == 2: 
		return ['$(VCTargetsPath)\Microsoft.Cpp.Targets']


def ensure_path(directory):
	try:
		os.makedirs(directory)
	except OSError as e:
		pass

def visual_studio(project, files, name, **kwargs):
	if serpent.projects.get(name, None) != None: raise Exception("Duplicate name")
	deps = kwargs.get('deps', [])
	base = kwargs.get('base',  os.path.join( serpent._WORKING_ROOT, serpent._SERPENT_WORKAREA ) )
	toolversion = kwargs.get('toolversion', serpent.default_toolversion)
	toolset = kwargs.get('toolset', visual_studio_toolset or serpent.default_toolset)
	defines = list(filter(lambda x: x is not None, kwargs.get('defines', [])))
	includes = list(filter(lambda x: x is not None, kwargs.get('includes', [])))
	libs = list(filter(lambda x: x is not None, kwargs.get('libs', [])))
	libdirs = list(filter(lambda x: x is not None, kwargs.get('libdirs', [])))
	compileopts = kwargs.get('compileopts', [])
	linkopts = kwargs.get('linkopts', [])
	intdir = kwargs.get('intdir', [])
	outdir = kwargs.get('outdir', [])
	platforms = kwargs.get('platforms', ['x64']) 
	resources = kwargs.get('resources', [])
	shared = kwargs.get('shared', Application)
	depends = kwargs.get('depends', [])
	configuration = kwargs.get('configuration', serpent._configurations)
	condition = kwargs.get('condition', [])
	headers = kwargs.get('headers', [])
	runtime = kwargs.get('runtime', 'StaticRuntime')

	project = os.path.abspath(os.path.join(base, project))
	intdir = os.path.abspath(os.path.join(base, intdir)) + "/"
	outdir = os.path.abspath(os.path.join(base, outdir)) + "/"
	#intdir = os.path.relpath(intdir, project)
	#outdir = os.path.relpath(outdir, project)

	serpent._target_outputs[name] = outdir

	_expand(includes, os.path.dirname(project))
	_expand(libdirs, os.path.dirname(project))
	_expand(files, os.path.dirname(project))
	_expand(headers, os.path.dirname(project))
	_expand(resources, os.path.dirname(project))
	_expand(libs, os.path.dirname(project))
	for x in range(len(defines)):
		defines[x] = _msvc_entity_safe(defines[x])
	
	ensure_path(os.path.dirname(project))
	serpent._internal[name] = _external(project, name, '380D6B49-C7EA-4F3A-8383-B50CAC3F054D', depends=depends, configurations = configuration, platforms=platforms )	
	visual_studio_filters(project, toolversion=toolversion, files=files, headers=headers)

	runtime = _msvc_to_runtime(runtime)
	_shared = _msvc_to_applicationtype(shared)

	serpent.projects[name] = os.path.abspath(project);
	serpent.outdirs[name] = outdir;
	serpent.target( name = name )

	def generate(**kwargs):
		_compileopts = " ".join(compileopts);
		_linkopts = " ".join(linkopts);
		if not os.path.exists(os.path.dirname(project)): os.mkdir(os.path.dirname(project))

		fobj = StringIO()	
		fobj.write("""
<Project DefaultTargets="Build" ToolsVersion="%s" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>  
	<PlatformToolset>%s</PlatformToolset>
	<ConfigurationType>%s</ConfigurationType>    
	<Configuration>Release</Configuration>
	<OutDir>%s</OutDir>
	<IntDir>%s</IntDir>    
  </PropertyGroup>\n""" %  (toolversion, toolset, _shared, outdir + '/', intdir + '/'))

		fobj.write("  <ItemGroup Label=\"ProjectConfigurations\">\n")

		for y in platforms:
			for x in configuration:
				fobj.write("""    <ProjectConfiguration Include="%s|%s">\n""" % (x, y, ))
				fobj.write("""      <Configuration>%s</Configuration>\n""" % x)
				fobj.write("""      <Platform>%s</Platform>\n""" % (y, )) 
				fobj.write("""      <PlatformTarget>%s</PlatformTarget>\n""" % (y, )) 
				fobj.write("""    </ProjectConfiguration>\n""")			
		fobj.write("  </ItemGroup>\n")		

		# Generate the imports for the Visual Studio Project
		props = kwargs.get('commonprops', "common.props")
		for x in visual_studio_generator(1): fobj.write("  <Import Project=\"%s\" />\n" % x )
		fobj.write("  <Import Project=\"%s\" />\n" % props)

		fobj.write("""  <ItemDefinitionGroup>
	<ClCompile>
	  <AdditionalOptions>%s %%(AdditionalOptions)</AdditionalOptions>
	  <PreprocessorDefinitions>%s</PreprocessorDefinitions>
	  <AdditionalIncludeDirectories>%s;%%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
	  <RuntimeLibrary>%s</RuntimeLibrary>
	</ClCompile>
	<Link>
	  <AdditionalLibraryDirectories>%s;%%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
	  <AdditionalOptions>%s %%(AdditionalOptions)</AdditionalOptions>
	  <AdditionalDependencies>%s</AdditionalDependencies>
	  <SubSystem>Console</SubSystem>
	</Link>    
  </ItemDefinitionGroup>\n""" % (_compileopts, (";".join(str(x) for x in defines)), (";".join(str(x) for x in includes)), runtime, (";".join(str(x) for x in libdirs)), 
  _linkopts, (";".join(str(x) for x in libs))) )		

		for x in condition:
			fobj.write("<PropertyGroup Condition=\"%s\">\n" % x.condition )
			fobj.write("</PropertyGroup>\n")
			fobj.write("  <ItemDefinitionGroup Condition=\"%s\">\n" % x.condition )
			fobj.write("  <ClCompile>\n")

			__runtime = x.kwargs.get('runtime', None)			
			if __runtime is not None:
				__runtime = _msvc_to_runtime(__runtime)
				fobj.write("  <RuntimeLibrary>%s</RuntimeLibrary>\n" % __runtime)
			__compileopts = x.kwargs.get('compileopts', None)
			if __compileopts is not None:
				fobj.write("  <AdditionalOptions>%s %%(AdditionalOptions)</AdditionalOptions>\n" % " ".join(__compileopts))
			fobj.write("  </ClCompile>\n")
			fobj.write("  <Link>\n")
			fobj.write("  </Link>\n")
			fobj.write("</ItemDefinitionGroup>\n")

		resources_ = [('ClInclude', headers), ('ClCompile', files), ('ResourceCompile', resources)]
		for resource_ in resources_:
			fobj.write("  <ItemGroup>\n");
			for x in resource_[1]:			
				fobj.write("      <%s Include=\"%s\" />\n" % (resource_[0], x));
			fobj.write("  </ItemGroup>\n");

		# Generate the imports for the Visual Studio Project
		# fobj.write("  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n");
		for x in visual_studio_generator(2): fobj.write("  <Import Project=\"%s\" />\n" % x );
		fobj.write("</Project>");
	
		output_value = fobj.getvalue();
		fobj.close();
		del fobj

		if os.path.isfile(project):
			output_stream = open(project, 'r')
			value = output_stream.read()
			output_stream.close()
			if value != output_value:
				output_stream = open(project, 'w')
				output_stream.write(output_value)
				output_stream.close()
		else:
			output_stream = open(project, 'w')
			output_stream.write(output_value)
			output_stream.close()			
		del output_value

	if serpent.action == "workspace" or serpent.action == "build" or serpent.action == "rebuild" or serpent.action == "clean":
		serpent._internal[name].generate = generate
				

def qt_project(project, files, name, **kwargs):
	if serpent.projects.get(name, None) != None: raise Exception("Duplicate name")
	qt_targets_file = os.path.abspath( os.path.join(os.path.dirname(__file__),'../dist/qt.targets') )

	base = kwargs.get('base',  os.path.join( serpent._WORKING_ROOT, serpent._SERPENT_WORKAREA ) )
	deps = kwargs.get('deps', [])
	toolversion = kwargs.get('toolversion', serpent.default_toolversion)
	toolset = kwargs.get('toolset', serpent.default_toolset)
	defines = kwargs.get('defines', [])
	platforms = kwargs.get('platforms', ['x64']) 
	includes = kwargs.get('includes', [])
	libs = kwargs.get('libs', [])
	libdirs = kwargs.get('libdirs', [])
	compileopts = kwargs.get('compileopts', [])
	linkopts = kwargs.get('linkopts', [])
	intdir = kwargs.get('intdir', [])
	outdir = kwargs.get('outdir', [])
	uifiles = kwargs.get('uifiles', [])
	uiheaders = kwargs.get('uiheaders', [])
	uiresource = kwargs.get('uiresource', [])
	resources = kwargs.get('resources', [])
	shared = kwargs.get('shared', Application)
	depends = kwargs.get('depends', [])
	configuration = kwargs.get('configuration', serpent._configurations)
	condition = kwargs.get('condition', [])
	headers = kwargs.get('headers', [])
	runtime = kwargs.get('runtime', 'StaticRuntime')

	project = os.path.abspath(os.path.join(base, project))
	intdir = os.path.abspath(os.path.join(base, intdir)) + "/"
	outdir = os.path.abspath(os.path.join(base, outdir)) + "/"
	#intdir = os.path.relpath(intdir, project)
	#outdir = os.path.relpath(outdir, project)

	_expand(uifiles, os.path.dirname(project), True)
	_expand(uiheaders, os.path.dirname(project),True)
	_expand(uiresource, os.path.dirname(project),True)
	_expand(includes, os.path.dirname(project))
	_expand(libdirs, os.path.dirname(project))
	_expand(files, os.path.dirname(project))
	_expand(headers, os.path.dirname(project))
	_expand(resources, os.path.dirname(project))
	_expand(libs, os.path.dirname(project))

	for x in range(len(defines)):
		defines[x] = _msvc_entity_safe(defines[x])		

	serpent.projects[name] = os.path.abspath(project);
	serpent.outdirs[name] = outdir;
	serpent.target( name = name )
	serpent._internal[name] = _external(project, name, '380D6B49-C7EA-4F3A-8383-B50CAC3F054D', depends=depends, platforms=platforms)
	serpent._target_outputs[name] = outdir
	includes = [x.replace('\\', '\\\\') for x in includes]	

	def generate(**kwargs):
		_compileopts = " ".join(compileopts);
		_linkopts = " ".join(linkopts);
		if not os.path.exists(os.path.dirname(project)): os.mkdir(os.path.dirname(project))
		fobj = StringIO()
		fobj.write("""
<Project DefaultTargets="Build" ToolsVersion="%s" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
	<ConfigurationType>Application</ConfigurationType>
	<PlatformToolset>%s</PlatformToolset>
	<Configuration>Release</Configuration>
	<OutDir>%s</OutDir>
	<IntDir>%s</IntDir>
	<QTDIR>%s</QTDIR>  
	<Moc>$(QTDIR)/bin/moc.exe</Moc>
	<GenDir>moc_$(MSBuildProjectName)</GenDir>
  </PropertyGroup>
  <ItemDefinitionGroup>
	<ClCompile>
	  <AdditionalOptions>%s %%(AdditionalOptions)</AdditionalOptions>
	  <PreprocessorDefinitions>%s</PreprocessorDefinitions>
	  <AdditionalIncludeDirectories>%s;$(GenDir);%%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
	</ClCompile>
	<Link>
	  <AdditionalOptions>%s %%(AdditionalOptions)</AdditionalOptions>
	  <AdditionalDependencies>%s</AdditionalDependencies>
	</Link>    
  </ItemDefinitionGroup>
		""" %  ( str(toolversion), str(toolset), outdir, intdir, serpent.triggers['qt-sdk'], _compileopts, ";".join(str(x) for x in defines), ";".join(str(x) for x in includes), _linkopts, (";".join(str(x) for x in libs) )))

		fobj.write("  <ItemGroup>\n")
		for y in platforms:
			for x in configuration:
				fobj.write("""    <ProjectConfiguration Include="%s|%s">\n""" % (x, y, ))
				fobj.write("""      <Configuration>%s</Configuration>\n""" % x)
				fobj.write("""      <Platform>%s</Platform>\n""" % (y, )) 
				fobj.write("""      <PlatformTarget>%s</PlatformTarget>\n""" % (y, )) 
				fobj.write("""    </ProjectConfiguration>\n""")			
		fobj.write("  </ItemGroup>\n")		

		# Generate the imports for the Visual Studio Project
		props = kwargs.get('commonprops', "common.props")
		for x in visual_studio_generator(1): fobj.write("<Import Project=\"%s\" />" % x )
		fobj.write("<Import Project=\"%s\" />" % props)		

		duifiles = [str(x) for x in uifiles]
		resources_ = [('ClCompile', files), ('UIFiles',	duifiles), ('QtIncludes', uiheaders), ('ResFiles', uiresource), ('ResourceCompile', resources)]
		for resource_ in resources_:
			fobj.write("<ItemGroup>\n");
			for x in resource_[1]:			
				fobj.write("    <%s Include=\"%s\" />\n" % (resource_[0], x));
			fobj.write("</ItemGroup>\n");
 
		# Generate the imports for the Visual Studio Project
		for x in visual_studio_generator(2): fobj.write("<Import Project=\"%s\" />" % x );
		fobj.write("<Import Project=\"%s\" />" % qt_targets_file);
		fobj.write("</Project>");

		output_value = fobj.getvalue();
		fobj.close();
		del fobj
		
		if os.path.isfile(project):
			output_stream = open(project, 'r')
			value = output_stream.read()
			output_stream.close()
			if value != output_value:
				output_stream = open(project, 'w')
				output_stream.write(output_value)
				output_stream.close()
		else:
			output_stream = open(project, 'w')
			output_stream.write(output_value)
			output_stream.close()			
		del output_value

	if serpent.action == "workspace" or serpent.action == "build" or serpent.action == "rebuild" or serpent.action == "clean":
		serpent._internal[name].generate = generate

def visual_studio_debug_options(project, executable = "", arguments = "", workingdir = "", environment = [], **kwargs):
	base = kwargs.get('base',  os.path.join( serpent._WORKING_ROOT, serpent._SERPENT_WORKAREA ) )
	envvars = kwargs.get('envvars',  {} )

	project = os.path.abspath(os.path.join(base, project))
	projdir = os.path.dirname(project)
	if not os.path.exists(projdir): os.mkdir(projdir)		
	userFile = os.path.abspath(project + '.user');
	
	if isinstance(executable, macro):
		executable = str(executable);
	else:
		executable = os.path.abspath(str(executable));

	if isinstance(workingdir, macro):
		workingdir = str(workingdir);
	else:
		workingdir = os.path.abspath(str(workingdir));

	environment1 = "PATH=" + ";".join( environment + ["$(PATH)"] )
	for var in envvars:
		environment1 = environment1 + "\n" + var + "=" + ";".join( "$(" + var + ")" if x == True else x for x in envvars[var] )

	fobj = open(userFile, 'w')
	fobj.write("""<?xml version="1.0" encoding="utf-8"?>
	<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	  <PropertyGroup>
		<LocalDebuggerCommand>%s</LocalDebuggerCommand>
		<LocalDebuggerCommandArguments>%s</LocalDebuggerCommandArguments>
		<LocalDebuggerWorkingDirectory>%s</LocalDebuggerWorkingDirectory>
		<LocalDebuggerEnvironment>%s</LocalDebuggerEnvironment>	    
		<DebuggerFlavor>WindowsLocalDebugger</DebuggerFlavor>
	  </PropertyGroup>
	</Project>
	""" % (executable, arguments, workingdir, environment1))
	fobj.close();

def visual_studio_solution(solution, format = 12, version = 2012, projects = []):
	solution = os.path.abspath(solution);
	v = _solution(solution=solution, format=format, version=version, projects=projects, debug=debuginfo())
	solutions.append(v)


def msbuild(project, projects = [], prepostbuild=False):
	if not os.path.exists(os.path.dirname(project)):
		raise Exception("Path {0} does not exists".format(project))
	if serpent.action == "workspace" or serpent.action == "build" or serpent.action == "rebuild" or serpent.action == "clean":


		'''
		for x in projects:
			name = x
			x = serpent.projects.get(x, None);
			if x is None:
				raise Exception("Project '%s' does not exists" % name)			
		'''

		if not os.path.exists(os.path.dirname(project)): os.mkdir(os.path.dirname(project))
		fobj = open(project, 'w')
		fobj.write("""
		<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
			<ItemGroup>\n
		""")
		for x in reversed(projects):
			x = serpent._internal.get(x, None);
			if x is not None:
				for z in x.platforms or ['x64']:
					for y in x.configurations or serpent._configurations:
						fobj.write("    <ProjectToBuild Include=\"%s\">\n" % os.path.abspath(x.project));
						options = ';'.join(x.options)
						fobj.write("    <AdditionalProperties>Configuration=%s;Platform=%s;%s</AdditionalProperties>\n" % (y, z, options))  
						fobj.write("    </ProjectToBuild>\n")

		fobj.write("""
			</ItemGroup>""")

		fobj.write("""
			<Target Name="Build">			    
				<MSBuild Projects="@(ProjectToBuild)" Targets="Build" />
			</Target>
		""")

		fobj.write("""		    
			<Target Name="Rebuild">
				<MSBuild Projects="@(ProjectToBuild)" Targets="Rebuild" />
			</Target>
		""")

		fobj.write("""
			<Target Name="Clean">
				<MSBuild Projects="@(ProjectToBuild)" Targets="Clean" />
			</Target>
		""")

		if prepostbuild == True:
			fobj.write("""
				<Target Name="Prebuild" BeforeTargets="Build;Rebuild;Clean">
					<message text="Prebuild target running" importance="high" ></message>
					<Exec Command="%s prebuild" WorkingDirectory="%s" />				
				</Target>
				<Target Name="Postbuild" AfterTargets="Build;Rebuild;Clean">
					<message text="Postbuild target running" importance="high"></message>
					<Exec Command="%s postbuild" WorkingDirectory="%s" />				
				</Target>
				<Target Name="Empty">
				</Target>
			""" % (serpent._SERPENT_COMMAND, serpent._WORKING_DIR, serpent._SERPENT_COMMAND, serpent._WORKING_DIR) )

		fobj.write("""</Project>""")
		fobj.close();

def test(project, **kwargs):
	base = kwargs.get('base', serpent._SERPENT_WORKAREA)
	project = os.path.abspath(os.path.join(base, project))
	def generate():
		if not os.path.exists(os.path.dirname(project)): os.mkdir(os.path.dirname(project))
		fobj = open(project, 'w')
		fobj.write("<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n")
		fobj.write("<PropertyGroup>\n")
		for x in serpent.triggers:
			fobj.write("<%s>%s</%s>\n" % (x,serpent.triggers[x],x))
		fobj.write("</PropertyGroup>\n")
		fobj.write("</Project>")	
		fobj.close()
	return (project, generate)

_build = serpent.build		

def union_targets():
	p = set(serpent._targets)
	if "*" in p:			
		for x in serpent._internal: p.add(x)
		serpent._targets = list(p)
	else:
		for y in serpent._targets:
			if y in serpent._internal: y=serpent._internal[y]; serpent._targets = list(set(serpent._targets) | set(y.depends or []))

def define_gitignore():
	fullpath = os.path.join(serpent._WORKING_DIR, ".git/info/exclude")
	if os.path.isfile(fullpath):
		f = open(fullpath, "r")
		contents = f.read()
		f.close()
		if serpent._SERPENT_WORKSPACE not in contents:
			contents = contents + "\n" + serpent._SERPENT_WORKSPACE
			f = open(fullpath, "w")
			f.write(contents)
			f.close()

def define_hgignore():
	fullpath = os.path.join(serpent._WORKING_DIR, ".hg/hgignore")
	if os.path.isfile(fullpath):
		f = open(fullpath, "r")
		contents = f.read()
		f.close()
		if serpent._SERPENT_WORKSPACE not in contents:
			contents = contents + "\n" + serpent._SERPENT_WORKSPACE
			f = open(fullpath, "w")
			f.write(contents)
			f.close()

def build():
	msbuild_exe = find_executable("msbuild", 
		[	
			"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Msbuild\\Current\\Bin\\amd64	",
			"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Msbuild\\Current\\Bin",		
			"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319",
			"C:\\Program Files (x86)\\MSBuild\\14.0\\Bin"
		])
	if msbuild_exe is None:
		print("Cannot find msbuild.exe") 
		os.exit(-1)

	def pregenerate(**kwargs):
		for y in serpent._targets:
			print("pregenerate", y)
			if y in serpent._internal: 
				obj = serpent._internal[y]
				print("running generate", obj.generate)
				if obj.generate: obj.generate(**kwargs)

	def solutiongenerate():
		for x in solutions: 
			try:
				x.generate()
			except Exception as xe:
				print(xe)			
				print("error generating solution %s" % x.kwargs.get('solution', ''))
				return False
		return True

	if _build is not None: _build()

	# Generate the visual studio solution files
	if serpent.action == "workspace":
		define_gitignore()
		define_hgignore()
		if solutiongenerate() == False:
			return

	if serpent.action == "cmake":
		for y in serpent._targets:
			if y in serpent._internal: y=serpent._internal[y]
			serpent._targets = list(set(serpent._targets) | set(y.depends))		
		for x in serpent._premake: x()
	if serpent.action == "build":	
		entrypoint = ".srp-workarea/msvc/common.msproj"
		commonprops, generate = test("msvc/common.props")		
		union_targets()
		pregenerate(commonprops=commonprops)
		for x in serpent._premake: x()
		generate()
		msbuild(project = entrypoint, projects = serpent._targets)
		args = [msbuild_exe, entrypoint, '/t:Build',  '/p:ADK_PATH=E:\\Workspaces\\Import', '/verbosity:m',
		'/flp:Summary;Verbosity=minimal;LogFile=.srp-workarea/BUILD_SUMMARY', '/flp1:warningsonly;logfile=.srp-workarea/BUILD_WARNINGS', '/flp2:errorsonly;logfile=.srp-workarea/BUILD_ERRORS', '/maxcpucount:4']
		print(args)
		exit_code = subprocess.call(args)
		sys.exit(exit_code);
	if serpent.action == "rebuild":
		entrypoint = ".srp-workarea/common.msproj"	
		commonprops, generate = test("msvc/common.props")	
		union_targets()
		pregenerate(commonprops=commonprops)
		for y in serpent._targets:
			if y in serpent._internal: y=serpent._internal[y]; serpent._targets = list(set(serpent._targets) | set(y.depends or []))
		for x in serpent._premake: x()
		generate()
		msbuild(project = entrypoint, projects = serpent._targets)
		exit_code = subprocess.call([msbuild_exe, entrypoint, '/t:Rebuild', '/p:Platform=Win32', '/p:ADK_PATH=E:\\Workspaces\\Import', '/verbosity:m',
		'/flp:Summary;Verbosity=minimal;LogFile=.srp-workarea/BUILD_SUMMARY', '/flp1:warningsonly;logfile=.srp-workarea/BUILD_WARNINGS', '/flp2:errorsonly;logfile=.srp-workarea/BUILD_ERRORS', '/maxcpucount:4'])
		sys.exit(exit_code);
	if serpent.action == "clean":
		entrypoint = ".srp-workarea/common.msproj"	
		commonprops, generate = test("msvc/common.props")	
		union_targets()
		pregenerate(commonprops=commonprops)
		for y in serpent._targets:
			if y in serpent._internal: y=serpent._internal[y]; serpent._targets = list(set(serpent._targets) | set(y.depends or []))
		for x in serpent._premake: x()
		generate()
		msbuild(project = entrypoint, projects = serpent._targets)
		exit_code = subprocess.call([msbuild_exe, entrypoint, '/t:Clean', '/p:Platform=Win32', '/p:ADK_PATH=E:\\Workspaces\\Import', '/verbosity:m', '/flp:Summary;Verbosity=minimal;LogFile=.srp-workarea/BUILD_SUMMARY', '/flp1:warningsonly;logfile=.srp-workarea/BUILD_WARNINGS', '/flp2:errorsonly;logfile=.srp-workarea/BUILD_ERRORS', '/maxcpucount:4'])
		sys.exit(exit_code);

def target_run():
	print("")
	for x in serpent._targets:
		project_file = serpent.projects.get(x, None)
		outdir = serpent.outdirs.get(x, None)

		if not project_file: continue
		print("Running.... %s" % project_file)
		executable =  os.path.join(os.path.dirname(project_file), outdir) + "/" + os.path.splitext(os.path.basename(project_file))[0] + ".exe"
		print(executable)
		subprocess.call([executable])
		print("")
		print("")				


serpent.build = build;
serpent.target_run = target_run;
del build
del target_run


if os.path.isfile('../dist/qt.targets'): _create_targets(os.path.dirname(__file__),'../dist/qt.targets', qt_targets)


def execute_process(
	working_dir,
	command
):
	def execute_process_inner(
		working_dir,
		command
	):
		print("execute.... {0}".format(' '.join(command)))
		subprocess.call(command, cwd=working_dir)

	serpent._execute_commands.append(
		(execute_process_inner, (working_dir, command) )
	)

serpent.execute_process = execute_process
del execute_process




def shortcut(link, target, description, working_dir, arguments=""):
	if os.path.isfile(link):
		os.remove(link)
	if not os.path.isfile(link):
		import win32com.client
		fso = win32com.client.Dispatch("Scripting.FileSystemObject")
		oWS = win32com.client.Dispatch("WScript.Shell")		
		oLink = oWS.CreateShortcut(link)
		oLink.Description = description
		oLink.TargetPath = os.path.join(serpent._WORKING_DIR, target)
		oLink.WorkingDirectory = os.path.join(serpent._WORKING_DIR, working_dir)
		oLink.Arguments = arguments
		oLink.Save()

def ensure_path_exists(file):
	directory = os.path.dirname(file)
	directory = '.' if directory == '' else directory
	if not os.path.exists(directory): os.mkdir(directory)


def contents(file, contents=None, filename=None, variables=serpent.triggers):
	
	'''
	from mako.template import Template
	TheText = None
	if filename is not None:
		TheText = Template(filename=filename)
	elif contents is not None:
		TheText = Template(contents)		
	FilledTemplate  = TheText.render(**variables)
	f=open(file,"w")
	f.write(FilledTemplate)
	f.close()
	'''

	if contents is None:	
		f=open(filename,"r")
		contents = f.read()
		f.close()	
	for x in variables:
		var = variables[x].replace("\\","/")
		contents = contents.replace("@" + x + "@", var)
	ensure_path_exists(file)
	f=open(file,"w")
	f.write(contents)
	f.close()	


def abspath(name):
	return os.path.abspath(name)

serpent.contents = contents
del contents	

serpent.from_target = from_target
del from_target


serpent.abspath = abspath
del abspath
