import serpent, os, subprocess, ctypes, re, sys, StringIO

serpent.default_toolversion = '4.0'
serpent.default_toolset = 'v110'
serpent.projects = {}
serpent.outdirs = {}
serpent.configuration = {}
serpent._internal = {}
serpent._configurations = ['Release']

solutions = []
Application=1
DynamicLibrary=2
StaticLibrary=3

qt_targets = """
<Target Name="CompileQtQRC" BeforeTargets="ClCompile" Inputs="@(ResFiles)" Outputs="@(ResFiles->'%(RootDir)%(Directory)qrc_%(Filename).cpp')">
	 <Message Text="Compiling: %(ResFiles.FullPath) using rcc" />
	 <Exec Command="&quot;$(QTDIR)/bin/rcc.exe&quot; &quot;%(ResFiles.FullPath)&quot; -o &quot;%(ResFiles.RootDir)%(ResFiles.Directory)qrc_%(ResFiles.Filename).cpp&quot;"/>
 </Target>		
 <Target Name="CreateDirectories" BeforeTargets="Moc">
    <MakeDir Directories="$(GenDir)"/>
 </Target>
 <Target Name="Moc" Inputs="@(QtIncludes)" BeforeTargets="ClCompile" Outputs="@(QtIncludes->'$(GenDir)/moc_%(Filename).cpp')">
    <Exec Command = "&quot;$(Moc)&quot; &quot;%(QtIncludes.identity)&quot; -nw -o &quot;$(GenDir)/moc_%(Filename).cpp&quot; $(MocFlags)"/>
  	<ItemGroup>
        <ClCompile Include="$(GenDir)/moc_%(Filename).cpp" Condition="Exists('$(GenDir)/moc_%(Filename).cpp')" />
    </ItemGroup> 
 </Target>
 <Target Name="CompileQtUI" BeforeTargets="ClCompile" Inputs="@(UIFiles)" Outputs="@(UIFiles->'$(GenDir)/ui_%(Filename).h')">
 	<Message Text="Compiling: %(UIFiles.FullPath) using UIC" />
 	<Exec Command="&quot;$(QTDIR)\\bin\\uic.exe&quot; &quot;%(UIFiles.FullPath)&quot; -o &quot;$(GenDir)/ui_%(UIFiles.Filename).h&quot;"/>
</Target>
"""

class _external:
	def __init__(self, project, name, guid, configurations = None, depends = None, options = []):
		self.name = name
		self.project = os.path.abspath(project)
		self.configurations = configurations
		self.guid = guid
		self.depends = depends
		self.options = options

class _project:
	def __init__(self, project, name, guid, configurations = None, depends = None, options = []):
		self.name = name
		self.project = os.path.abspath(project)
		self.configurations = configurations
		self.guid = guid
		self.depends = depends
		self.options = options

class _condition:
	def __init__(self, condition, **kwargs):
		self.condition = condition
		self.kwargs = kwargs

class _solution:
	def __init__(self, **kwargs):
		self.kwargs = kwargs
	def generate(self):
		solution = self.kwargs.get('solution', None)
		format = self.kwargs.get('format', 12), 
		version = self.kwargs.get('version', 2012), 
		projects = self.kwargs.get('projects', [])

		solutiondir = os.path.dirname(solution)
		if not os.path.exists(solutiondir): os.mkdir(solutiondir)
		fobj = StringIO.StringIO()
		fobj.write("""Microsoft Visual Studio Solution File, Format Version %s.00\n\r""" % format);
		fobj.write("""# Visual Studio %s\n\r""" % version);

		for project in projects:
			obj = serpent._internal[project]
			relative_path = os.path.relpath(obj.project, solutiondir)
			guid = None
			if obj.project.endswith(".csproj"):
				guid = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";
			elif obj.project.endswith(".vcxproj"):
				guid = "{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}";			
			fobj.write("""Project("%s") = "%s", "%s", "{%s}"\n\r""" % (guid, obj.name, relative_path, obj.guid));
			fobj.write("""EndProject\n\r""");

		output_value = fobj.getvalue();
		fobj.close();
		del fobj
		
		if os.path.isfile(solution):
			output_stream = open(solution, 'r')
			value = output_stream.read()
			output_stream.close()
			if value != output_value:
				output_stream = open(solution, 'w')
				output_stream.write(output_value)
				output_stream.close()
		else:
			output_stream = open(solution, 'w')
			output_stream.write(output_value)
			output_stream.close()			
		del output_value

def _create_targets(project, string):
	project = os.path.join( os.path.dirname(os.path.realpath(__file__)), project);
	fobj = StringIO.StringIO()
	fobj.write('<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">');
	fobj.write(string)
	fobj.write('</Project>');
	output_value = fobj.getvalue();
	fobj.close();
	del fobj
	
	if os.path.isfile(project):
		output_stream = open(project, 'r')
		value = output_stream.read()
		output_stream.close()
		if value != output_value:
			output_stream = open(project, 'w')
			output_stream.write(output_value)
			output_stream.close()
	else:
		output_stream = open(project, 'w')
		output_stream.write(output_value)
		output_stream.close()			
	del output_value

def _msvc_to_runtime(runtime):
	if runtime in ['StaticRuntime', 'DynamicRuntime', 'StaticDebugRuntime', 'DynamicDebugRuntime']:
		index = ['StaticRuntime', 'DynamicRuntime', 'StaticDebugRuntime', 'DynamicDebugRuntime'].index(runtime)
		mappings = ['MultiThreaded','MultiThreadedDLL','MultiThreadedDebug','MultiThreadedDebugDLL']
		runtime = mappings[index]
	elif runtime in ['/MT', '/MD', '/MTd', '/MDd']:
		index = ['/MT', '/MD', '/MTd', '/MDd'].index(runtime)
		mappings = ['MultiThreaded','MultiThreadedDLL','MultiThreadedDebug','MultiThreadedDebugDLL']
		runtime = mappings[index]
	else:
		raise Exception("Runtime not expected")
	return runtime

def _msvc_to_applicationtype(shared):
	_shared = ""
	if shared == Application:
		_shared = "Application"
	elif shared == DynamicLibrary:
		_shared = "DynamicLibrary"
	elif shared == StaticLibrary:
		_shared = "StaticLibrary"
	else:
		raise Exception("Runtime not expected")
	return _shared		

def _msvc_entity_safe(str):
	return str.replace("<", "&lt;").replace(">", "&gt;")


class macro:
	def __init__(self, value):
		self.value = value
	def __str__(self):
		return self.value

def external(project, name, configuration = serpent._configurations, depends = [], options = [] ):
	if not os.path.exists(project):
		raise Exception("Path %s does not exists" % project )
	if serpent.projects.get(name, None) != None:
		raise Exception("Duplicate name")
	serpent.projects[name] = project;
	# if configuration is not None:
	#	serpent.configuration[name] = configuration
	serpent.target( name = name )

	f = open(project, 'r')
	content = f.read()
	f.close()

	guid = '380D6B49-C7EA-4F3A-8383-B50CAC3F054D';
	match = re.search("\<ProjectGuid\>\{([A-Za-z0-9\-]+)\}\<\/ProjectGuid\>", content)
	if match is not None:
		guid = match.groups(1)[0]
	serpent._internal[name] = _external(project, name, guid, configuration, depends, options)
	del content
	del match


def cmake(name, project, folder, input, arguments = [], configuration = serpent._configurations):
	project = os.path.abspath(project)
	folder = os.path.abspath(folder)
	input = os.path.abspath(input)
	relative_input = os.path.relpath(input, folder)
	if not os.path.exists(folder): os.makedirs(folder)
	if not os.path.exists(input):
		raise Exception("Input folder does not exists")	
	def _premake():
		print serpent._targets
		if name in serpent._targets:
			output = subprocess.call(["C:\\Program Files (x86)\\CMake\\bin\\cmake.exe", relative_input] + arguments, cwd=folder)
		external(name = name, project = project, configuration = configuration )
	serpent._premake.append(_premake)
	serpent.target( name = name )
	del _premake

def visual_studio_dirname(x):
	x = os.path.dirname(x.replace("..\\","").replace(".\\",""))
	return x;

def visual_studio_filters_expand(files, strip=visual_studio_dirname, directory = {}):
	extension = 'rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx;h;hpp;hxx;hm;inl;inc;xsd'
	for x in files:
  		x = strip(x)
  		directory[x] = (serpent.guid(), extension)
  		array = x.split("\\")
  		path = array[0]
  		for z in array[1:]:
  			if path not in directory:
  				directory[path] = (serpent.guid(), extension)
  			path = path + "\\" + z
  	return directory


def visual_studio_filters(project, toolversion=serpent.default_toolversion, files = [], headers = []):

	project = os.path.abspath(project)
	project = project + ".filters"
	fobj = StringIO.StringIO()	
	fobj.write('<?xml version="1.0" encoding="utf-8"?>\n')
	fobj.write('<Project DefaultTargets="Build" ToolsVersion="%s" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">\n' % toolversion)

	directory = {}
	visual_studio_filters_expand(directory, files)
	visual_studio_filters_expand(directory, headers)  	

	fobj.write("<ItemGroup>\n");
	for x in sorted(directory):	
		fobj.write("    <Filter Include=\"%s\">\n" % x);
		fobj.write("    	<UniqueIdentifier>{%s}</UniqueIdentifier>\n" % directory[x][0]);
		fobj.write("    	<Extensions>%s</Extensions>\n" % directory[x][1]);
		fobj.write("    </Filter>\n");
	fobj.write("</ItemGroup>\n");

	fobj.write("<ItemGroup>\n");
	for x in files:
  		z = os.path.dirname(x.replace("..\\","").replace(".\\",""))
  		fobj.write("    <ClCompile Include=\"%s\">\n" % x);
		fobj.write("    <Filter>%s</Filter>\n" % z);
		fobj.write("    </ClCompile>\n");
	fobj.write("</ItemGroup>\n");

	fobj.write("<ItemGroup>\n");
	for x in headers:
  		z = os.path.dirname(x.replace("..\\","").replace(".\\",""))
  		fobj.write("    <ClInclude Include=\"%s\">\n" % x);
		fobj.write("    <Filter>%s</Filter>\n" % z);
		fobj.write("    </ClInclude>\n");
	fobj.write("</ItemGroup>\n");

	fobj.write('</Project>')
	
	output_value = fobj.getvalue();
	fobj.close();
	del fobj

	if os.path.isfile(project):
		output_stream = open(project, 'r')
		value = output_stream.read()
		output_stream.close()
		if value != output_value:
			output_stream = open(project, 'w')
			output_stream.write(output_value)
			output_stream.close()
	else:
		output_stream = open(project, 'w')
		output_stream.write(output_value)
		output_stream.close()			
	del output_value



def  _expand(items, workingdir):
	for x in range(len(items)):
		if items[x].startswith(':'):
			items[x] = items[x].replace(":","")
		elif items[x] == "":
			continue	
		elif items[x].startswith('./'):
			items[x] = os.path.relpath(items[x], workingdir)
		elif serpent.path.isabs(items[x]) == False:
			items[x] = os.path.relpath(items[x], workingdir)
	return items;


def visual_studio_generator(stage):
	# Get property files that need to be includes
	if stage == 1: 
		return ['$(VCTargetsPath)\Microsoft.Cpp.default.props', '$(VCTargetsPath)\Microsoft.Cpp.props']
	if stage == 2: 
		return ['$(VCTargetsPath)\Microsoft.Cpp.Targets']


def visual_studio(project, files, name, **kwargs):

	if serpent.projects.get(name, None) != None: raise Exception("Duplicate name")

	deps = kwargs.get('deps', [])
	toolversion = kwargs.get('toolversion', serpent.default_toolversion)
	toolset = kwargs.get('toolset', serpent.default_toolset)
	defines = filter(lambda x: x is not None, kwargs.get('defines', []))
	includes = filter(lambda x: x is not None, kwargs.get('includes', []))
	libs = filter(lambda x: x is not None, kwargs.get('libs', []))
	libdirs = filter(lambda x: x is not None, kwargs.get('libdirs', []))
	compileopts = kwargs.get('compileopts', [])
	linkopts = kwargs.get('linkopts', [])
	intdir = kwargs.get('intdir', [])
	outdir = kwargs.get('outdir', [])
	resources = kwargs.get('resources', [])
	shared = kwargs.get('shared', Application)
	depends = kwargs.get('depends', [])
	configuration = kwargs.get('configuration', serpent._configurations)
	condition = kwargs.get('condition', [])
	headers = kwargs.get('headers', [])
	runtime = kwargs.get('runtime', 'StaticRuntime')

	project = os.path.abspath(project)
	intdir = os.path.abspath(intdir)
	outdir = os.path.abspath(outdir)
	projdir = os.path.dirname(project)
	intdir = os.path.relpath(intdir, projdir)
	outdir = os.path.relpath(outdir, projdir)

	_expand(includes, os.path.dirname(project))
	_expand(libdirs, os.path.dirname(project))
	_expand(files, os.path.dirname(project))
	_expand(headers, os.path.dirname(project))
	_expand(resources, os.path.dirname(project))
	_expand(libs, os.path.dirname(project))
	for x in range(len(defines)):
		defines[x] = _msvc_entity_safe(defines[x])
	
	serpent._internal[name] = _external(project, name, '380D6B49-C7EA-4F3A-8383-B50CAC3F054D', depends=depends, configurations = configuration )	
	visual_studio_filters(project, toolversion=toolversion, files=files, headers=headers)

	runtime = _msvc_to_runtime(runtime)
	_shared = _msvc_to_applicationtype(shared)

	serpent.projects[name] = os.path.abspath(project);
	serpent.outdirs[name] = outdir;
	serpent.target( name = name )

	if serpent.action == "workspace" or serpent.action == "build" or serpent.action == "rebuild" or serpent.action == "clean":
		

		_compileopts = " ".join(compileopts);
		_linkopts = " ".join(linkopts);
		if not os.path.exists(os.path.dirname(project)): os.mkdir(os.path.dirname(project))

		fobj = StringIO.StringIO()	
		fobj.write("""
<Project DefaultTargets="Build" ToolsVersion="%s" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
  	<PlatformToolset>%s</PlatformToolset>
    <ConfigurationType>%s</ConfigurationType>    
    <Configuration>Release</Configuration>
    <OutDir>%s</OutDir>
    <IntDir>%s</IntDir>    
  </PropertyGroup>
  <ItemDefinitionGroup>
    <ClCompile>
      <AdditionalOptions>%s %%(AdditionalOptions)</AdditionalOptions>
      <PreprocessorDefinitions>%s</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>%s;%%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <RuntimeLibrary>%s</RuntimeLibrary>
    </ClCompile>
    <Link>
      <AdditionalLibraryDirectories>%s;%%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%s %%(AdditionalOptions)</AdditionalOptions>
      <AdditionalDependencies>%s</AdditionalDependencies>
      <SubSystem>Console</SubSystem>
    </Link>    
  </ItemDefinitionGroup>    

		""" %  (toolversion, toolset, _shared, outdir + '/', intdir + '/', _compileopts, ";".join(defines), ";".join(includes), runtime, ";".join(libdirs), _linkopts, ";".join(libs)))

		for x in condition:
			fobj.write("<PropertyGroup Condition=\"%s\">\n" % x.condition )
			fobj.write("</PropertyGroup>\n")
			fobj.write("<ItemDefinitionGroup Condition=\"%s\">\n" % x.condition )
			fobj.write("<ClCompile>\n")

			__runtime = x.kwargs.get('runtime', None)			
			if __runtime is not None:
				__runtime = _msvc_to_runtime(__runtime)
				fobj.write("<RuntimeLibrary>%s</RuntimeLibrary>\n" % __runtime)
			__compileopts = x.kwargs.get('compileopts', None)
			if __compileopts is not None:
				fobj.write("<AdditionalOptions>%s %%(AdditionalOptions)</AdditionalOptions>\n" % " ".join(__compileopts))
			fobj.write("</ClCompile>\n")
			fobj.write("<Link>\n")
			fobj.write("</Link>\n")
			fobj.write("</ItemDefinitionGroup>\n")

		fobj.write("<ItemGroup>")
		for x in configuration:
			fobj.write("""\t<ProjectConfiguration Include="%s|Win32">\n""" % x)
			fobj.write("""\t\t<Configuration>%s</Configuration>\n""" % x)
			fobj.write("""\t\t<Platform>Win32</Platform>\n""")
			fobj.write("""\t</ProjectConfiguration>\n""")
		fobj.write("</ItemGroup>")

		# Generate the imports for the Visual Studio Project
		for x in visual_studio_generator(1): fobj.write("<Import Project=\"%s\" />" % x );
		fobj.write("<Import Project=\"common.props\" />");

		resources_ = [('ClInclude', headers), ('ClCompile', files), ('ResourceCompile', resources)]
		for resource_ in resources_:
			fobj.write("<ItemGroup>\n");
			for x in resource_[1]:			
				fobj.write("    <%s Include=\"%s\" />\n" % (resource_[0], x));
			fobj.write("</ItemGroup>\n");

		# Generate the imports for the Visual Studio Project
		for x in visual_studio_generator(2): fobj.write("<Import Project=\"%s\" />" % x );
		fobj.write("</Project>");
	
		output_value = fobj.getvalue();
		fobj.close();
		del fobj

		if os.path.isfile(project):
			output_stream = open(project, 'r')
			value = output_stream.read()
			output_stream.close()
			if value != output_value:
				output_stream = open(project, 'w')
				output_stream.write(output_value)
				output_stream.close()
		else:
			output_stream = open(project, 'w')
			output_stream.write(output_value)
			output_stream.close()			
		del output_value

		

def qt_project(project, files, name, **kwargs):
	if serpent.projects.get(name, None) != None: raise Exception("Duplicate name")

	deps = kwargs.get('deps', [])
	toolversion = kwargs.get('toolversion', serpent.default_toolversion)
	toolset = kwargs.get('toolset', serpent.default_toolset)
	defines = kwargs.get('defines', [])
	includes = kwargs.get('includes', [])
	libs = kwargs.get('libs', [])
	libdirs = kwargs.get('libdirs', [])
	compileopts = kwargs.get('compileopts', [])
	linkopts = kwargs.get('linkopts', [])
	intdir = kwargs.get('intdir', [])
	outdir = kwargs.get('outdir', [])
	uifiles = kwargs.get('uifiles', [])
	uiheaders = kwargs.get('uiheaders', [])
	uiresource = kwargs.get('uiresource', [])
	resources = kwargs.get('resources', [])
	shared = kwargs.get('shared', Application)
	depends = kwargs.get('depends', [])
	configuration = kwargs.get('configuration', serpent._configurations)
	condition = kwargs.get('condition', [])
	headers = kwargs.get('headers', [])
	runtime = kwargs.get('runtime', 'StaticRuntime')

	project = os.path.abspath(project)
	intdir = os.path.abspath(intdir)
	outdir = os.path.abspath(outdir)
	projdir = os.path.dirname(project)
	intdir = os.path.relpath(intdir, projdir)
	outdir = os.path.relpath(outdir, projdir)

	_expand(uifiles, os.path.dirname(project))
	_expand(uiheaders, os.path.dirname(project))
	_expand(uiresource, os.path.dirname(project))
	_expand(includes, os.path.dirname(project))
	_expand(libdirs, os.path.dirname(project))
	_expand(files, os.path.dirname(project))
	_expand(headers, os.path.dirname(project))
	_expand(resources, os.path.dirname(project))
	_expand(libs, os.path.dirname(project))

	for x in range(len(defines)):
		defines[x] = _msvc_entity_safe(defines[x])		

	serpent.projects[name] = os.path.abspath(project);
	serpent.outdirs[name] = outdir;
	serpent.target( name = name )
	serpent._internal[name] = _external(project, name, '380D6B49-C7EA-4F3A-8383-B50CAC3F054D', depends=depends)

	if serpent.action == "workspace" or serpent.action == "build" or serpent.action == "rebuild" or serpent.action == "clean":

		_compileopts = " ".join(compileopts);
		_linkopts = " ".join(linkopts);
		includes = [x.replace('\\', '\\\\') for x in includes]
		if not os.path.exists(os.path.dirname(project)): os.mkdir(os.path.dirname(project))
		fobj = StringIO.StringIO()
		fobj.write("""
<Project DefaultTargets="Build" ToolsVersion="%s" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ConfigurationType>Application</ConfigurationType>
    <PlatformToolset>%s</PlatformToolset>
    <Configuration>Release</Configuration>
    <OutDir>%s</OutDir>
    <IntDir>%s</IntDir>
	<QTDIR>E:\\Programming - VC Sdk\\Qt\\5.5\\msvc2012</QTDIR>  
	<Moc>$(QTDIR)/bin/moc.exe</Moc>
	<GenDir>moc_$(MSBuildProjectName)</GenDir>
  </PropertyGroup>
  <ItemDefinitionGroup>
    <ClCompile>
      <AdditionalOptions>%s %%(AdditionalOptions)</AdditionalOptions>
      <PreprocessorDefinitions>%s</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>%s;$(GenDir);%%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ClCompile>
    <Link>
      <AdditionalOptions>%s %%(AdditionalOptions)</AdditionalOptions>
      <AdditionalDependencies>%s</AdditionalDependencies>
    </Link>    
  </ItemDefinitionGroup>
		""" %  (toolversion, toolset, outdir, intdir, _compileopts, ";".join(defines), ";".join(includes), _linkopts, ";".join(libs)))

		fobj.write("<ItemGroup>")
		for x in configuration:
			fobj.write("""\t<ProjectConfiguration Include="%s|Win32">\n""" % x)
			fobj.write("""\t\t<Configuration>%s</Configuration>\n""" % x)
			fobj.write("""\t\t<Platform>Win32</Platform>\n""")
			fobj.write("""\t</ProjectConfiguration>\n""")
		fobj.write("</ItemGroup>")

		for x in visual_studio_generator(1): fobj.write("<Import Project=\"%s\" />" % x );
		fobj.write("<Import Project=\"common.props\" />");

		resources_ = [('ClCompile', files), ('UIFiles', uifiles), ('QtIncludes', uiheaders), ('ResFiles', uiresource), ('ResourceCompile', resources)]
		for resource_ in resources_:
			fobj.write("<ItemGroup>\n");
			for x in resource_[1]:			
				fobj.write("    <%s Include=\"%s\" />\n" % (resource_[0], x));
			fobj.write("</ItemGroup>\n");
 
		# Generate the imports for the Visual Studio Project
		for x in visual_studio_generator(2): fobj.write("<Import Project=\"%s\" />" % x );
		fobj.write("<Import Project=\"qt.targets\" />");
		fobj.write("</Project>");

		output_value = fobj.getvalue();
		fobj.close();
		del fobj
		
		if os.path.isfile(project):
			output_stream = open(project, 'r')
			value = output_stream.read()
			output_stream.close()
			if value != output_value:
				output_stream = open(project, 'w')
				output_stream.write(output_value)
				output_stream.close()
		else:
			output_stream = open(project, 'w')
			output_stream.write(output_value)
			output_stream.close()			
		del output_value

def visual_studio_debug_options(project, executable = "", arguments = "", workingdir = ""):
	project = os.path.abspath(project);
	projdir = os.path.dirname(project)
	if not os.path.exists(projdir): os.mkdir(projdir)		
	userFile = os.path.abspath(project + '.user');
	
	if isinstance(executable, macro):
		executable = str(executable);
	else:
		executable = os.path.abspath(executable);

	if isinstance(workingdir, macro):
		workingdir = str(workingdir);
	else:
		workingdir = os.path.abspath(workingdir);

	fobj = open(userFile, 'w')
	fobj.write("""<?xml version="1.0" encoding="utf-8"?>
	<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	  <PropertyGroup>
	    <LocalDebuggerCommand>%s</LocalDebuggerCommand>
	    <LocalDebuggerCommandArguments>%s</LocalDebuggerCommandArguments>
	    <LocalDebuggerWorkingDirectory>%s</LocalDebuggerWorkingDirectory>
	    <DebuggerFlavor>WindowsLocalDebugger</DebuggerFlavor>
	  </PropertyGroup>
	</Project>
	""" % (executable, arguments, workingdir))
	fobj.close();

def visual_studio_solution(solution, format = 12, version = 2012, projects = []):
	solution = os.path.abspath(solution);
	v = _solution(solution=solution, format=format, version=version, projects=projects)
	solutions.append(v)


def msbuild(project, projects = []):
	if not os.path.exists(os.path.dirname(project)):
		raise Exception("Path does not exists")
	if serpent.action == "workspace" or serpent.action == "build" or serpent.action == "rebuild" or serpent.action == "clean":		

		'''
		for x in projects:
			name = x
			x = serpent.projects.get(x, None);
			if x is None:
				raise Exception("Project '%s' does not exists" % name)			
		'''

		if not os.path.exists(os.path.dirname(project)): os.mkdir(os.path.dirname(project))
		fobj = open(project, 'w')
		fobj.write("""
		<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
		    <ItemGroup>\n
		""")
		for x in reversed(projects):
			x = serpent._internal.get(x, None);
			if x is not None:
				for y in x.configurations or serpent._configurations:
					fobj.write("    <ProjectToBuild Include=\"%s\">\n" % os.path.relpath(x.project, os.path.basename(project)));
					options = ';'.join(x.options)
					fobj.write("    <AdditionalProperties>Configuration=%s;%s</AdditionalProperties>\n" % (y, options))  
					fobj.write("    </ProjectToBuild>\n")

		fobj.write("""
		    </ItemGroup>""")

		fobj.write("""
		    <Target Name="Build">			    
		        <MSBuild Projects="@(ProjectToBuild)" Properties="Configuration=Release" Targets="Build" />
		    </Target>
		""")

		fobj.write("""		    
		    <Target Name="Rebuild">
		        <MSBuild Projects="@(ProjectToBuild)" Properties="Configuration=Release" Targets="Rebuild" />
		    </Target>
		""")

		fobj.write("""
		    <Target Name="Clean">
		        <MSBuild Projects="@(ProjectToBuild)" Properties="Configuration=Release" Targets="Clean" />
		    </Target>
		""")

	
		fobj.write("""
			<Target Name="Prebuild" BeforeTargets="Build;Rebuild;Clean">
				<message text="Prebuild target running" importance="high" ></message>
				<Exec Command="%s prebuild" WorkingDirectory="%s" />				
			</Target>
			<Target Name="Postbuild" AfterTargets="Build;Rebuild;Clean">
				<message text="Postbuild target running" importance="high"></message>
				<Exec Command="%s postbuild" WorkingDirectory="%s" />				
			</Target>
		    <Target Name="Empty">
		    </Target>
		""" % (serpent._SERPENT_COMMAND, serpent._WORKING_DIR, serpent._SERPENT_COMMAND, serpent._WORKING_DIR) )

		fobj.write("""</Project>""")
		fobj.close();

def test(project):
	if not os.path.exists(os.path.dirname(project)): os.mkdir(os.path.dirname(project))
	fobj = open(project, 'w')
	fobj.write("<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n")
	fobj.write("<PropertyGroup>\n")
	for x in serpent.triggers:
		fobj.write("<%s>%s</%s>\n" % (x,serpent.triggers[x],x))
	fobj.write("</PropertyGroup>\n")
	fobj.write("</Project>")	
	fobj.close()

_build = serpent.build		

def union_targets():
	p = set(serpent._targets)
	if "*" in serpent._targets:			
		for x in serpent._internal: p.add(x)
		serpent._targets = list(p)
	else:
		for y in serpent._targets:
			if y in serpent._internal: y=serpent._internal[y]; serpent._targets = list(set(serpent._targets) | set(y.depends or []))

def build():
	if _build is not None: _build()
	for x in solutions: x.generate()

	if serpent.action == "cmake":
		for y in serpent._targets:
			if y in serpent._internal: y=serpent._internal[y]
			serpent._targets = list(set(serpent._targets) | set(y.depends))		
		for x in serpent._premake: x()
	if serpent.action == "build":		
		union_targets()
		for x in serpent._premake: x()
		test("msvc/common.props")
		msbuild(project = "msvc/common.msproj", projects = serpent._targets)
		exit_code = subprocess.call(['msbuild', 'msvc/common.msproj', '/t:Build', '/p:Platform=Win32', '/p:ADK_PATH=E:\\Workspaces\\Import', '/verbosity:m',
		'/flp:Summary;Verbosity=minimal;LogFile=.srp/BUILD_SUMMARY', '/flp1:warningsonly;logfile=.srp/BUILD_WARNINGS', '/flp2:errorsonly;logfile=.srp/BUILD_ERRORS', '/maxcpucount:4'])
		sys.exit(exit_code);
	if serpent.action == "rebuild":
		union_targets()
		for y in serpent._targets:
			if y in serpent._internal: y=serpent._internal[y]; serpent._targets = list(set(serpent._targets) | set(y.depends or []))
		for x in serpent._premake: x()
		test("msvc/common.props")
		msbuild(project = "msvc/common.msproj", projects = serpent._targets)
		exit_code = subprocess.call(['msbuild', 'msvc/common.msproj', '/t:Rebuild', '/p:Platform=Win32', '/p:ADK_PATH=E:\\Workspaces\\Import', '/verbosity:m',
		'/flp:Summary;Verbosity=minimal;LogFile=.srp/BUILD_SUMMARY', '/flp1:warningsonly;logfile=.srp/BUILD_WARNINGS', '/flp2:errorsonly;logfile=.srp/BUILD_ERRORS', '/maxcpucount:4'])
		sys.exit(exit_code);
	if serpent.action == "clean":
		union_targets()
		for y in serpent._targets:
			if y in serpent._internal: y=serpent._internal[y]; serpent._targets = list(set(serpent._targets) | set(y.depends or []))
		for x in serpent._premake: x()
		test("msvc/common.props")
		msbuild(project = "msvc/common.msproj", projects = serpent._targets)
		exit_code = subprocess.call(['msbuild', 'msvc/common.msproj', '/t:Clean', '/p:Platform=Win32', '/p:ADK_PATH=E:\\Workspaces\\Import', '/verbosity:m', '/flp:Summary;Verbosity=minimal;LogFile=.srp/BUILD_SUMMARY', '/flp1:warningsonly;logfile=.srp/BUILD_WARNINGS', '/flp2:errorsonly;logfile=.srp/BUILD_ERRORS', '/maxcpucount:4'])
		sys.exit(exit_code);

	print("building solutions end")

def target_run():
	print ""
	for x in serpent._targets:
		project_file = serpent.projects.get(x, None)
		outdir = serpent.outdirs.get(x, None)

		if not project_file: continue
		print "Running.... %s" % project_file
		executable =  os.path.join(os.path.dirname(project_file), outdir) + "/" + os.path.splitext(os.path.basename(project_file))[0] + ".exe"
		print executable
		subprocess.call([executable])
		print ""
		print ""				

serpent.build = build;
serpent.target_run = target_run;
del build
del target_run

_create_targets('msvc/qt.targets', qt_targets)